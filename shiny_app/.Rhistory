#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("kassambara/ggpubr")
library(ggpubr)
df <- as.data.frame(data)
df$Density <- df$Density/df$Spanning.Area
#df$Genotypes <- c(rep('Wild-Type',6),rep('Dyrk1A+/-',6))
Genotypes <- c(rep('WT_Ts65Dn',6),rep('WT_Dyrk1A+/-',6),rep('Ts65Dn',6),rep('Dyrk1A+/-',6))
####### ALL MORPHOLOGICAL
# df2 <- subset(df,df$genotype=="WT_Ts65Dn" | df$genotype=="Ts65Dn")
# Genotypes <- c(rep('Wild-Type',6),rep('Ts65Dn',6))
#
## df2 <- subset(df,df$genotype=="WT_Dyrk1Ahet" | df$genotype=="Dyrk1Ahet")
## Genotypes <- c(rep('Wild-Type',6),rep('Dyrk1Ahet',6))
#
# df2 <- subset(df,df$genotype=="WT_Ts65Dn" | df$genotype=="WT_Dyrk1Ahet")
# Genotypes <- c(rep('WT_Ts65Dn',6),rep('WT_Dyrk1Ahet',6))
df2 <- df
devtools::install_github("kassambara/ggpubr")
install.packages("dplyr", repos = "http://mran.revolutionanalytics.com")
devtools::install_github("kassambara/ggpubr")
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("kassambara/ggpubr")
library(ggpubr)
install.packages('ggpubr')
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("kassambara/ggpubr")
library(ggpubr)
df <- as.data.frame(data)
stat_mean()
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
shiny::runApp('F:/Figures_EE_2019/shiny_app')
runApp('F:/Figures_EE_2019/shiny_app')
install.packagaes('ggbiplot')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp()
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
library(orca)
install.packages("orca")
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
webshot::install_phantomjs()
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
shiny::runApp('F:/Figures_EE_2019/shiny_app')
runApp()
runApp('F:/Figures_EE_2019/shiny_app')
shiny::runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
shiny::runApp('F:/Figures_EE_2019/shiny_app')
library(ggpubr)
library(reshape2)
library(forcats)
regs <- read.csv('regions.csv')
projs <- read.csv('projection_matrix_allen_ml.csv')
types <- read.csv('SEUJanelia_projreg.csv')
types <- types[,c(1,2,7)]
types$cluster_type <- types$NO..axon.terminal.cluster
types$NO..axon.terminal.cluster <- NULL
# strsplit(as.character(BOs$id[1]),'.',fixed=T)[[1]][1]
# BOs$id <- unlist(lapply(BOs$id, function(x) strsplit(as.character(x), '.',fixed=T)[[1]][1]))
df <- merge(projs,regs,by='id')
# df <- merge(projs,types,by='id')
df$dataset <- 'SEU'
df$dataset[grep('AA',df$id)] <- 'Janelia'
dforig <- df
df <- melt(df)
# df <- subset(df, df$region %in% c('VPM','VPL','LGd','MG','VAL',
# 'SSp-m','SSp-bfd','SSp-n','SSp-ul','SSs','MOp','MOs','VISp','CP'))
# df <- subset(df, df$region %in% unique(df$region)[30])
# df <- subset(df, df$region %in% c('VPM','VPL','LGd','MG','VAL'))
# df$value[df$value==0] <- NA
df <- df[df$value!=0,]
df <- subset(df, df$region %in% c('MOp'))
# ggbarplot(df,y="value",x="region", facet.by = 'variable',fill="region",add = c("mean_sd"))
# ggbarplot(df,y="value",x="variable", facet.by = 'region',add = c("mean_sd")) +
#   facet_wrap( ~ region, ncol = 1,strip.position = "left") +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# df <- aggregate(cbind(value)~variable,df,FUN = "mean")
# df$regiontype <- paste0(df$region,'_',df$cluster_type,'_',df$dataset)
df$regiontype <- paste0(df$region,'_',df$dataset)
df <- aggregate(df,
# by = list(df$variable,df$region),
by = list(df$variable,df$regiontype,df$dataset),
FUN = "mean")
df$id <- NULL
df$region <-df$Group.2
df$variable <-df$Group.1
df$dataset <- df$Group.3
df$variable <- forcats::fct_rev(factor(df$variable))
# df$variable <- substring(as.character(df$variable),6)
ggballoonplot(df,y="variable",x="region",size="value",fill="dataset",add = c("mean"),rotate.x.text = F) +
scale_x_discrete(position = "top")#+
# theme(axis.text.x=element_text(vjust=-1,hjust=-1)) +
# theme(axis.text.x=element_text(angle=45))
dfcorr <- subset(dforig, dforig$region %in% c('VPM','VPL','VAL',
'SSp-m','SSp-bfd','SSp-ul','SSs','MOp','MOs','VISp'))
# dfcorr <- subset(dforig, dforig$region %in% c('VPM','VPL','LGd','MOp','MOs'))
dfcorr$id <-paste0(dfcorr$id,'_',dfcorr$region,'_',dfcorr$dataset)
dfcorr$region <-paste0(dfcorr$region,'_',dfcorr$dataset)
dfcorr$dataset <- NULL
ids <- dfcorr$id
# dfcorr$id <- NULL
dfcorr <- melt(dfcorr)
dfcorr <- aggregate(dfcorr,
by = list(dfcorr$variable,dfcorr$region),
# by = list(df$variable,df$regiontype,df$dataset),
FUN = "mean")
dfcorr$variable<-dfcorr$Group.1
dfcorr$region<-dfcorr$Group.2
dfcorr$Group.1 <- NULL
dfcorr$Group.2 <- NULL
dfcorr$id <- NULL
library(ggpubr)
library(reshape2)
library(forcats)
regs <- read.csv('regions.csv')
projs <- read.csv('projection_matrix_allen_ml.csv')
types <- read.csv('SEUJanelia_projreg.csv')
types <- types[,c(1,2,7)]
types$cluster_type <- types$NO..axon.terminal.cluster
types$NO..axon.terminal.cluster <- NULL
# strsplit(as.character(BOs$id[1]),'.',fixed=T)[[1]][1]
# BOs$id <- unlist(lapply(BOs$id, function(x) strsplit(as.character(x), '.',fixed=T)[[1]][1]))
df <- merge(projs,regs,by='id')
# df <- merge(projs,types,by='id')
df$dataset <- 'SEU'
df$dataset[grep('AA',df$id)] <- 'Janelia'
dforig <- df
df <- melt(df)
# df <- subset(df, df$region %in% c('VPM','VPL','LGd','MG','VAL',
# 'SSp-m','SSp-bfd','SSp-n','SSp-ul','SSs','MOp','MOs','VISp','CP'))
# df <- subset(df, df$region %in% unique(df$region)[30])
# df <- subset(df, df$region %in% c('VPM','VPL','LGd','MG','VAL'))
# df$value[df$value==0] <- NA
df <- df[df$value!=0,]
df <- subset(df, df$region %in% c('MOp'))
# ggbarplot(df,y="value",x="region", facet.by = 'variable',fill="region",add = c("mean_sd"))
# ggbarplot(df,y="value",x="variable", facet.by = 'region',add = c("mean_sd")) +
#   facet_wrap( ~ region, ncol = 1,strip.position = "left") +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# df <- aggregate(cbind(value)~variable,df,FUN = "mean")
# df$regiontype <- paste0(df$region,'_',df$cluster_type,'_',df$dataset)
df$regiontype <- paste0(df$region,'_',df$dataset)
df <- aggregate(df,
# by = list(df$variable,df$region),
by = list(df$variable,df$regiontype,df$dataset),
FUN = "mean")
df$id <- NULL
df$region <-df$Group.2
df$variable <-df$Group.1
df$dataset <- df$Group.3
df$variable <- forcats::fct_rev(factor(df$variable))
# df$variable <- substring(as.character(df$variable),6)
ggballoonplot(df,y="variable",x="region",size="value",fill="dataset",add = c("mean"),rotate.x.text = F) +
scale_x_discrete(position = "top")#+
# theme(axis.text.x=element_text(vjust=-1,hjust=-1)) +
# theme(axis.text.x=element_text(angle=45))
dfcorr <- subset(dforig, dforig$region %in% c('VPM','VPL','VAL',
'SSp-m','SSp-bfd','SSp-ul','SSs','MOp','MOs','VISp'))
# dfcorr <- subset(dforig, dforig$region %in% c('VPM','VPL','LGd','MOp','MOs'))
dfcorr$id <-paste0(dfcorr$id,'_',dfcorr$region,'_',dfcorr$dataset)
dfcorr$region <-paste0(dfcorr$region,'_',dfcorr$dataset)
dfcorr$dataset <- NULL
ids <- dfcorr$id
# dfcorr$id <- NULL
dfcorr <- melt(dfcorr)
dfcorr <- aggregate(dfcorr,
by = list(dfcorr$variable,dfcorr$region),
# by = list(df$variable,df$regiontype,df$dataset),
FUN = "mean")
dfcorr$variable<-dfcorr$Group.1
dfcorr$region<-dfcorr$Group.2
dfcorr$Group.1 <- NULL
dfcorr$Group.2 <- NULL
dfcorr$id <- NULL
install.packages(c("emmeans", "ggpubr"))
install.packages(c("emmeans", "ggpubr"),dependencies = T)
install.packages('rstatix')
install.packages('car')
install.packages('haven')
install.packages("haven")
install.packages('vctrs')
install.packages("vctrs")
update.packages("vctrs")
update.packages("vctrs")
remove.packages('vctrs')
install.packages("vctrs")
install.packages("vctrs")
install.packages('haven')
install.packages('ggpubr')
shiny::runApp('F:/Figures_EE_2019/shiny_app')
shiny::runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
shiny::runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
library(installr)
updateR()
library(installr)
updateR()
library(installr)
updateR()
shiny::runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
devtools::install_github("vqv/gbiplot")
devtools::install_github("vqv/ggbiplot")
browse_github_pat()
install.packages("usethis")
install.packages("usethis")
browse_github_pat()
use_git()
library(usethis)
use_git()
browse_github_pat()
create_github_token()
gitcreds_set()
gitcreds::gitcreds_set()
devtools::install_github("vqv/ggbiplot")
gitcreds::gitcreds_set()
create_github_token()
shiny::runApp('F:/bigneuron/Both_GS_and_auto/shiny_app')
devtools::install_github("vqv/ggbiplot")
gitcreds::gitcreds_set()
devtools::install_github("vqv/ggbiplot")
library(devtools)
devtools::install_github("vqv/ggbiplot")
devtools::install_github("vqv/ggbiplot")
library(devtools)
install.packages("rlang")
library(devtools)
devtools::install_github("vqv/ggbiplot")
devtools::install_github("vqv/ggbiplot")
install.packages("ps")
install.packages("ps")
devtools::install_github("vqv/ggbiplot")
install.packages("processz")
install.packages("processx")
install.packages("processx")
devtools::install_github("vqv/ggbiplot")
install.pacakges("testthat")
devtools::install_github("vqv/ggbiplot")
remove.packages("testthat")
devtools::install_github("vqv/ggbiplot")
setwd("F:/bigneuron/Both_GS_and_auto/shiny_app")
shiny::runApp()
runApp()
plyr::rename
runApp()
runApp()
runApp()
setwd("F:/bigneuron/Both_GS_and_auto")
library(ggplot2)
library(ggpubr)
library(mclust)
library(factoextra)
library(cluster)
load('shiny_app/clustdat_dend.Rdata')
cdat_dend <- cdat
load('shiny_app/clustdat_iq.Rdata')
cdat_iq <- cdat
load('shiny_app/clustdat_both.Rdata')
cdat_both <- cdat
plot(mclustBIC(scale(cdat_dend),G=1:15))
plot(mclustBIC(scale(cdat_iq),G=1:15))
plot(mclustBIC(scale(cdat_both),G=1:15)) + abline(v = 9,col="lightblue", lwd=2, lty=2)
summary(mclustBIC(scale(cdat_both),G=1:15))
# plot(mclustBIC(scale(cdat_dend)))
# plot(mclustBIC(scale(cdat_iq)))
# plot(mclustBIC(scale(cdat_both)))
hcTree <- hc(modelName = "EEE", data = cdat_both)
plot(hcTree, what = "merge", labels = TRUE, maxG = 9)
fviz_nbclust(scale(cdat_dend), kmeans, method = "gap_stat",k.max=15) +
labs(subtitle = "Silhouette method")
fviz_nbclust(scale(cdat_iq), kmeans, method = "gap_stat",k.max=15) +
labs(subtitle = "Silhouette method")
fviz_nbclust(scale(cdat_both), kmeans, method = "gap_stat",k.max=15) +
labs(subtitle = "Silhouette method")
# fviz_nbclust(scale(cdat_dend), pam, method = "silhouette") +
#   labs(subtitle = "Silhouette method")
# fviz_nbclust(scale(cdat_iq), pam, method = "silhouette") +
#   labs(subtitle = "Silhouette method")
# fviz_nbclust(scale(cdat_both), pam, method = "silhouette") +
#   labs(subtitle = "Silhouette method")
# require(vegan)
# fit <- cascadeKM(scale(cdat_both, center = TRUE,  scale = TRUE), 1, 10, iter = 1000)
# plot(fit, sortg = TRUE, grpmts.plot = TRUE)
# calinski.best <- as.numeric(which.max(fit$results[2,]))
# cat("Calinski criterion optimal number of clusters:", calinski.best, "\n")
#
# library("WeightedCluster")
# hc <- hclust(dist(scale(cdat_both)))
# hcRange <- as.clustrange(hc, diss=dist(scale(cdat_both)), ncluster=20)
# summary(hcRange)
# plot(hcRange, stat = c("ASWw", "HG", "PBC"), lwd = 2)
#
# library(pvclust)
# mydata <- t(scale(cdat_both))
# fit <- pvclust(mydata, method.hclust="ward",
#                method.dist="euclidean")
# plot(fit) # dendogram with p values
# # add rectangles around groups highly supported by the data
# pvrect(fit, alpha=.95)
hcTree <- hc(modelName = "EEE", data = cdat_both)
plot(hcTree, what = "loglik")
plot(hcTree, what = "loglik", labels = TRUE)
plot(hcTree, what = "loglik", maxG = 9, labels = TRUE)
plot(hcTree, what = "merge")
plot(hcTree, what = "merge", labels = TRUE)
plot(hcTree, what = "merge", labels = TRUE, hang = 0.1)
plot(hcTree, what = "merge", labels = TRUE, hang = -1)
plot(hcTree, what = "merge", labels = TRUE, maxG = 9)
dend <- colour_clusters(hcTree, k=9, groupLabels=T)
setwd("F:/bigneuron/Both_GS_and_auto/shiny_app")
runApp()
